#!/bin/bash

# =============================================================================
# Web Penetration Testing Script with Report Generator
# Author: Security Tester
# Version: 1.0
# =============================================================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
TARGET=""
OUTPUT_DIR=""
REPORT_FILE=""
DATE=$(date '+%Y-%m-%d_%H-%M-%S')

# Banner
show_banner() {
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    WEB PENTEST SCANNER                       ║"
    echo "║                  Automated Security Testing                  ║"
    echo "║                        Version 1.0                          ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Help function
show_help() {
    echo -e "${CYAN}Usage: $0 [OPTIONS]${NC}"
    echo ""
    echo "Options:"
    echo "  -t, --target URL    Target URL to test (required)"
    echo "  -o, --output DIR    Output directory (default: pentest_results)"
    echo "  -h, --help          Show this help message"
    echo ""
    echo "Example:"
    echo "  $0 -t https://example.com -o results"
}

# Check if required tools are installed
check_dependencies() {
    echo -e "${YELLOW}[INFO] Checking dependencies...${NC}"
    
    local deps=("nmap" "curl" "wget" "dig" "whois" "nikto" "dirb" "sqlmap" "gobuster")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}[ERROR] Missing dependencies: ${missing_deps[*]}${NC}"
        echo "Please install missing tools and try again."
        exit 1
    fi
    
    echo -e "${GREEN}[SUCCESS] All dependencies found${NC}"
}

# Initialize output directory and report file
init_output() {
    OUTPUT_DIR="${1:-pentest_results}_${DATE}"
    mkdir -p "$OUTPUT_DIR"
    REPORT_FILE="$OUTPUT_DIR/pentest_report_${DATE}.md"
    
    echo -e "${GREEN}[INFO] Output directory: $OUTPUT_DIR${NC}"
    echo -e "${GREEN}[INFO] Report file: $REPORT_FILE${NC}"
    
    # Initialize report file
    cat > "$REPORT_FILE" << EOF
# Penetration Testing Report

**Target:** $TARGET  
**Date:** $(date)  
**Tester:** Automated Script  

## Executive Summary
This report contains the results of an automated penetration test performed against the target website.

---

EOF
}

# Log function
log_to_report() {
    echo -e "$1" >> "$REPORT_FILE"
    echo -e "$1"
}

# Extract domain from URL
extract_domain() {
    echo "$1" | sed -E 's/^https?:\/\///' | sed -E 's/\/.*$//' | sed -E 's/:.*$//'
}

# Information Gathering
info_gathering() {
    echo -e "${BLUE}[PHASE 1] Information Gathering${NC}"
    log_to_report "\n## 1. Information Gathering\n"
    
    local domain=$(extract_domain "$TARGET")
    
    # DNS Information
    echo -e "${YELLOW}[1.1] DNS Information${NC}"
    log_to_report "### 1.1 DNS Information\n"
    log_to_report '```'
    dig "$domain" | tee -a "$OUTPUT_DIR/dns_info.txt" | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
    
    # WHOIS Information
    echo -e "${YELLOW}[1.2] WHOIS Information${NC}"
    log_to_report "### 1.2 WHOIS Information\n"
    log_to_report '```'
    whois "$domain" | tee "$OUTPUT_DIR/whois_info.txt" | head -20 | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
    
    # HTTP Headers
    echo -e "${YELLOW}[1.3] HTTP Headers${NC}"
    log_to_report "### 1.3 HTTP Headers\n"
    log_to_report '```'
    curl -I "$TARGET" 2>/dev/null | tee "$OUTPUT_DIR/http_headers.txt" | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
    
    # Robots.txt
    echo -e "${YELLOW}[1.4] Robots.txt${NC}"
    log_to_report "### 1.4 Robots.txt\n"
    log_to_report '```'
    curl -s "${TARGET}/robots.txt" | tee "$OUTPUT_DIR/robots.txt" | head -20 | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
}

# Port Scanning
port_scanning() {
    echo -e "${BLUE}[PHASE 2] Port Scanning${NC}"
    log_to_report "## 2. Port Scanning\n"
    
    local domain=$(extract_domain "$TARGET")
    
    echo -e "${YELLOW}[2.1] Nmap Scan${NC}"
    log_to_report "### 2.1 Port Scan Results\n"
    log_to_report '```'
    
    # Quick scan of common ports
    nmap -sS -O -sV --top-ports 1000 "$domain" | tee "$OUTPUT_DIR/nmap_scan.txt" | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
    
    # Service detection
    echo -e "${YELLOW}[2.2] Service Detection${NC}"
    log_to_report "### 2.2 Service Detection\n"
    log_to_report '```'
    nmap -sV -A "$domain" | tee "$OUTPUT_DIR/service_detection.txt" | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
}

# Directory Enumeration
directory_enumeration() {
    echo -e "${BLUE}[PHASE 3] Directory Enumeration${NC}"
    log_to_report "## 3. Directory Enumeration\n"
    
    echo -e "${YELLOW}[3.1] Directory Brute Force${NC}"
    log_to_report "### 3.1 Directory Discovery\n"
    log_to_report '```'
    
    # Using dirb if available
    if command -v dirb &> /dev/null; then
        dirb "$TARGET" -o "$OUTPUT_DIR/dirb_results.txt" -r | head -50 | while read line; do
            log_to_report "$line"
        done
    elif command -v gobuster &> /dev/null; then
        # Alternative: gobuster
        gobuster dir -u "$TARGET" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o "$OUTPUT_DIR/gobuster_results.txt" | head -50 | while read line; do
            log_to_report "$line"
        done
    fi
    log_to_report '```\n'
    
    # Common files check
    echo -e "${YELLOW}[3.2] Common Files Check${NC}"
    log_to_report "### 3.2 Common Files\n"
    
    local common_files=("admin" "login" "dashboard" "config" "backup" "test" "dev" "api" "wp-admin" "phpmyadmin")
    
    for file in "${common_files[@]}"; do
        response=$(curl -s -o /dev/null -w "%{http_code}" "${TARGET}/${file}")
        if [ "$response" != "404" ]; then
            log_to_report "- /${file} - Status: $response"
        fi
    done
    log_to_report "\n"
}

# Vulnerability Assessment
vulnerability_assessment() {
    echo -e "${BLUE}[PHASE 4] Vulnerability Assessment${NC}"
    log_to_report "## 4. Vulnerability Assessment\n"
    
    # Nikto scan
    echo -e "${YELLOW}[4.1] Nikto Vulnerability Scan${NC}"
    log_to_report "### 4.1 Nikto Results\n"
    log_to_report '```'
    
    if command -v nikto &> /dev/null; then
        nikto -h "$TARGET" -output "$OUTPUT_DIR/nikto_results.txt" | head -30 | while read line; do
            log_to_report "$line"
        done
    fi
    log_to_report '```\n'
    
    # SSL/TLS Check
    echo -e "${YELLOW}[4.2] SSL/TLS Assessment${NC}"
    log_to_report "### 4.2 SSL/TLS Assessment\n"
    
    local domain=$(extract_domain "$TARGET")
    
    # Check SSL certificate
    log_to_report "#### SSL Certificate Information:\n"
    log_to_report '```'
    echo | openssl s_client -connect "${domain}:443" -servername "$domain" 2>/dev/null | openssl x509 -noout -text | head -20 | while read line; do
        log_to_report "$line"
    done
    log_to_report '```\n'
    
    # Check for common vulnerabilities
    echo -e "${YELLOW}[4.3] Common Vulnerability Checks${NC}"
    log_to_report "### 4.3 Common Vulnerabilities\n"
    
    # XSS Test
    log_to_report "#### XSS Test:\n"
    xss_payload="<script>alert('XSS')</script>"
    curl -s -d "test=${xss_payload}" "$TARGET" -o "$OUTPUT_DIR/xss_test.html"
    if grep -q "alert('XSS')" "$OUTPUT_DIR/xss_test.html"; then
        log_to_report "⚠️ **Potential XSS vulnerability detected**\n"
    else
        log_to_report "✅ No obvious XSS vulnerability\n"
    fi
    
    # SQL Injection basic test
    log_to_report "#### SQL Injection Test:\n"
    sql_payload="' OR '1'='1"
    response=$(curl -s -w "%{http_code}" -d "test=${sql_payload}" "$TARGET" -o /dev/null)
    log_to_report "SQL injection test response code: $response\n"
}

# Security Headers Check
security_headers_check() {
    echo -e "${BLUE}[PHASE 5] Security Headers Analysis${NC}"
    log_to_report "## 5. Security Headers Analysis\n"
    
    local headers=$(curl -I -s "$TARGET")
    
    log_to_report "### Security Headers Status:\n"
    
    # Check important security headers
    if echo "$headers" | grep -qi "strict-transport-security"; then
        log_to_report "✅ HSTS (HTTP Strict Transport Security) - Present\n"
    else
        log_to_report "❌ HSTS (HTTP Strict Transport Security) - Missing\n"
    fi
    
    if echo "$headers" | grep -qi "x-frame-options"; then
        log_to_report "✅ X-Frame-Options - Present\n"
    else
        log_to_report "❌ X-Frame-Options - Missing (Clickjacking vulnerability)\n"
    fi
    
    if echo "$headers" | grep -qi "x-xss-protection"; then
        log_to_report "✅ X-XSS-Protection - Present\n"
    else
        log_to_report "❌ X-XSS-Protection - Missing\n"
    fi
    
    if echo "$headers" | grep -qi "x-content-type-options"; then
        log_to_report "✅ X-Content-Type-Options - Present\n"
    else
        log_to_report "❌ X-Content-Type-Options - Missing\n"
    fi
    
    if echo "$headers" | grep -qi "content-security-policy"; then
        log_to_report "✅ Content-Security-Policy - Present\n"
    else
        log_to_report "❌ Content-Security-Policy - Missing\n"
    fi
}

# Generate final report
generate_final_report() {
    echo -e "${BLUE}[PHASE 6] Generating Final Report${NC}"
    
    log_to_report "## 6. Summary and Recommendations\n"
    log_to_report "### Key Findings:\n"
    log_to_report "- Scan completed on $(date)\n"
    log_to_report "- Total files generated: $(ls -1 $OUTPUT_DIR | wc -l)\n"
    log_to_report "- Raw scan data available in: $OUTPUT_DIR\n"
    
    log_to_report "\n### Recommendations:\n"
    log_to_report "1. Review all identified vulnerabilities\n"
    log_to_report "2. Implement missing security headers\n"
    log_to_report "3. Regular security testing and updates\n"
    log_to_report "4. Monitor for new vulnerabilities\n"
    
    log_to_report "\n### Files Generated:\n"
    for file in "$OUTPUT_DIR"/*; do
        if [ -f "$file" ]; then
            log_to_report "- $(basename "$file")\n"
        fi
    done
    
    log_to_report "\n---\n"
    log_to_report "*Report generated by Automated Pentest Script v1.0*\n"
    
    echo -e "${GREEN}[SUCCESS] Report generated: $REPORT_FILE${NC}"
}

# Main function
main() {
    show_banner
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t|--target)
                TARGET="$2"
                shift 2
                ;;
            -o|--output)
                OUTPUT_DIR="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Validate target
    if [ -z "$TARGET" ]; then
        echo -e "${RED}[ERROR] Target URL is required${NC}"
        show_help
        exit 1
    fi
    
    # Check dependencies
    check_dependencies
    
    # Initialize output
    init_output "$OUTPUT_DIR"
    
    echo -e "${GREEN}[INFO] Starting penetration test for: $TARGET${NC}"
    
    # Execute phases
    info_gathering
    port_scanning
    directory_enumeration
    vulnerability_assessment
    security_headers_check
    generate_final_report
    
    echo -e "${GREEN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    SCAN COMPLETED!                           ║"
    echo "║                                                              ║"
    echo "║  Report: $REPORT_FILE"
    echo "║  Output: $OUTPUT_DIR"
    echo "║                                                              ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Run main function with all arguments
main "$@"
