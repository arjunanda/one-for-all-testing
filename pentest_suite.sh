#!/bin/bash

# =============================================================================
# Pentest Suite Manager - Main Controller Script
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

show_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  PENTEST SUITE MANAGER                       ‚ïë"
    echo "‚ïë              Comprehensive Security Testing                  ‚ïë"
    echo "‚ïë                     Version 1.1                             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

show_menu() {
    echo -e "${CYAN}Available Options:${NC}"
    echo "1. üöÄ Quick Scan (5-10 minutes)"
    echo "2. üîç Comprehensive Scan (15-30 minutes)"
    echo "3. ‚ö° Advanced Vulnerability Assessment (20-40 minutes)"
    echo "4. üõ†Ô∏è  Install Dependencies"
    echo "5. üîß Check Tool Status"
    echo "6. üìä Convert Report to PDF/HTML"
    echo "7. üß™ Demo Mode (Safe Targets)"
    echo "8. ‚ùì Help"
    echo "9. üö™ Exit"
    echo ""
}

quick_scan() {
    echo -e "${YELLOW}Starting Quick Scan...${NC}"
    echo "This will perform basic security checks."
    
    read -p "Enter target URL: " target
    if [ -z "$target" ]; then
        echo -e "${RED}Target URL is required!${NC}"
        return
    fi
    
    echo "Running quick scan on: $target"
    if [ -f "quick_scan.sh" ]; then
        bash quick_scan.sh "$target"
    else
        echo -e "${RED}quick_scan.sh not found!${NC}"
    fi
}

comprehensive_scan() {
    echo -e "${YELLOW}Starting Comprehensive Scan...${NC}"
    echo "This will perform full penetration testing."
    
    read -p "Enter target URL: " target
    read -p "Enter output directory (optional): " output_dir
    
    if [ -z "$target" ]; then
        echo -e "${RED}Target URL is required!${NC}"
        return
    fi
    
    # Activate environment if available
    if [ -f "activate_pentest.sh" ]; then
        source activate_pentest.sh
    fi
    
    # Run comprehensive scan
    if [ -n "$output_dir" ]; then
        ./pentest.sh -t "$target" -o "$output_dir"
    else
        ./pentest.sh -t "$target"
    fi
}

advanced_vulnerability_scan() {
    echo -e "${YELLOW}Starting Advanced Vulnerability Assessment...${NC}"
    echo "This will perform deep vulnerability analysis with CVE detection."
    
    read -p "Enter target URL: " target
    read -p "Enter output directory (optional): " output_dir
    
    if [ -z "$target" ]; then
        echo -e "${RED}Target URL is required!${NC}"
        return
    fi
    
    # Set default output directory
    if [ -z "$output_dir" ]; then
        output_dir="advanced_pentest_$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Activate environment
    if [ -f "activate_pentest.sh" ]; then
        source activate_pentest.sh
    fi
    
    # Create output directory
    mkdir -p "$output_dir"
    
    # Run comprehensive pentest first
    echo -e "${BLUE}[1/2] Running comprehensive pentest...${NC}"
    ./pentest.sh -t "$target" -o "$output_dir"
    
    # Then run advanced vulnerability scanner separately for detailed analysis
    echo -e "${BLUE}[2/2] Running advanced vulnerability analysis...${NC}"
    if [ -f "advanced_vuln_scanner.sh" ]; then
        report_file=$(find "$output_dir" -name "*.md" | head -1)
        if [ -n "$report_file" ]; then
            bash advanced_vuln_scanner.sh "$target" "$output_dir" "$report_file"
        fi
    fi
    
    echo -e "${GREEN}Advanced vulnerability assessment completed!${NC}"
    echo -e "${BLUE}Results available in: $output_dir${NC}"
}

install_dependencies() {
    echo -e "${YELLOW}Installing Dependencies...${NC}"
    echo "Choose installation method:"
    echo "1. Full installation (install_deps_fixed.sh)"
    echo "2. PowerShell installation (Windows)"
    echo "3. Check what's already installed"
    
    read -p "Select option (1-3): " install_choice
    
    case $install_choice in
        1)
            if [ -f "install_deps_fixed.sh" ]; then
                bash install_deps_fixed.sh
            else
                echo -e "${RED}install_deps_fixed.sh not found!${NC}"
            fi
            ;;
        2)
            if [ -f "install_deps.ps1" ]; then
                echo "Run this in PowerShell as Administrator:"
                echo "Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force"
                echo ".\\install_deps.ps1"
            else
                echo -e "${RED}install_deps.ps1 not found!${NC}"
            fi
            ;;
        3)
            check_tool_status
            ;;
        *)
            echo -e "${RED}Invalid option!${NC}"
            ;;
    esac
}

check_tool_status() {
    echo -e "${BLUE}Checking Tool Status...${NC}"
    echo ""
    
    # Core tools
    echo -e "${CYAN}Core Tools:${NC}"
    command -v curl >/dev/null 2>&1 && echo "‚úÖ curl" || echo "‚ùå curl"
    command -v wget >/dev/null 2>&1 && echo "‚úÖ wget" || echo "‚ùå wget"
    command -v openssl >/dev/null 2>&1 && echo "‚úÖ openssl" || echo "‚ùå openssl"
    
    # Network tools
    echo -e "\n${CYAN}Network Tools:${NC}"
    command -v nmap >/dev/null 2>&1 && echo "‚úÖ nmap" || echo "‚ùå nmap"
    command -v dig >/dev/null 2>&1 && echo "‚úÖ dig" || echo "‚ùå dig"
    command -v whois >/dev/null 2>&1 && echo "‚úÖ whois" || echo "‚ùå whois"
    command -v nslookup >/dev/null 2>&1 && echo "‚úÖ nslookup" || echo "‚ùå nslookup"
    
    # Security tools
    echo -e "\n${CYAN}Security Tools:${NC}"
    command -v nikto >/dev/null 2>&1 && echo "‚úÖ nikto" || echo "‚ùå nikto"
    command -v dirb >/dev/null 2>&1 && echo "‚úÖ dirb" || echo "‚ùå dirb"
    command -v gobuster >/dev/null 2>&1 && echo "‚úÖ gobuster" || echo "‚ùå gobuster"
    command -v sqlmap >/dev/null 2>&1 && echo "‚úÖ sqlmap" || echo "‚ùå sqlmap"
    command -v subfinder >/dev/null 2>&1 && echo "‚úÖ subfinder" || echo "‚ùå subfinder"
    command -v httpx >/dev/null 2>&1 && echo "‚úÖ httpx" || echo "‚ùå httpx"
    
    # Python environment
    echo -e "\n${CYAN}Python Environment:${NC}"
    if [ -n "$VIRTUAL_ENV" ]; then
        echo "‚úÖ Virtual environment active: $VIRTUAL_ENV"
    elif [ -d "pentest-venv" ]; then
        echo "‚ö†Ô∏è  Virtual environment available but not active"
        echo "   Run: source activate_pentest.sh"
    else
        echo "‚ùå No virtual environment found"
    fi
    
    python3 -c "import requests" 2>/dev/null && echo "‚úÖ Python requests" || echo "‚ùå Python requests"
    python3 -c "import bs4" 2>/dev/null && echo "‚úÖ BeautifulSoup4" || echo "‚ùå BeautifulSoup4"
    
    # Report tools
    echo -e "\n${CYAN}Report Tools:${NC}"
    command -v pandoc >/dev/null 2>&1 && echo "‚úÖ pandoc" || echo "‚ùå pandoc"
    
    echo ""
}

convert_report() {
    echo -e "${YELLOW}Report Conversion...${NC}"
    
    echo "Available markdown reports:"
    find . -name "*.md" -path "*/pentest_results*" -o -name "pentest_report_*.md" | head -10
    
    read -p "Enter path to markdown report: " report_path
    
    if [ ! -f "$report_path" ]; then
        echo -e "${RED}Report file not found!${NC}"
        return
    fi
    
    if [ -f "convert_report.sh" ]; then
        bash convert_report.sh "$report_path"
    else
        echo -e "${RED}convert_report.sh not found!${NC}"
        echo "You can manually convert using:"
        echo "pandoc \"$report_path\" -o \"${report_path%.*}.pdf\""
        echo "pandoc \"$report_path\" -o \"${report_path%.*}.html\""
    fi
}

demo_mode() {
    echo -e "${YELLOW}Demo Mode...${NC}"
    
    if [ -f "demo.sh" ]; then
        bash demo.sh
    else
        echo -e "${RED}demo.sh not found!${NC}"
        echo "You can test with safe targets like:"
        echo "- http://testphp.vulnweb.com"
        echo "- http://demo.testfire.net"
        echo "- https://httpbin.org"
    fi
}

show_help() {
    echo -e "${CYAN}Pentest Suite Help:${NC}"
    echo ""
    echo -e "${YELLOW}Quick Scan:${NC}"
    echo "  Fast security assessment (5-10 minutes)"
    echo "  - Basic HTTP headers analysis"
    echo "  - Security headers check"
    echo "  - Common directory enumeration"
    echo "  - Quick port scan"
    echo ""
    echo -e "${YELLOW}Comprehensive Scan:${NC}"
    echo "  Full penetration testing (15-30 minutes)"
    echo "  - Information gathering (DNS, WHOIS)"
    echo "  - Port scanning with service detection"
    echo "  - Directory enumeration"
    echo "  - Basic vulnerability assessment"
    echo "  - Security headers analysis"
    echo "  - Detailed reporting"
    echo ""
    echo -e "${YELLOW}Advanced Vulnerability Assessment:${NC}"
    echo "  Deep security analysis (20-40 minutes)"
    echo "  - All comprehensive scan features"
    echo "  - Advanced XSS testing (10+ payloads)"
    echo "  - SQL injection testing (15+ payloads)"
    echo "  - File inclusion testing"
    echo "  - Command injection testing"
    echo "  - SSL/TLS vulnerability analysis"
    echo "  - CVE identification and mapping"
    echo "  - OWASP Top 10 assessment"
    echo "  - Risk scoring and remediation guidance"
    echo ""
    echo -e "${YELLOW}Files Created:${NC}"
    echo "  - Markdown report with executive summary"
    echo "  - Raw scan data files"
    echo "  - CVE list with references"
    echo "  - Vulnerability evidence files"
    echo ""
    echo -e "${YELLOW}Legal Notice:${NC}"
    echo "  Only use on systems you own or have explicit permission to test."
    echo "  Unauthorized testing is illegal and unethical."
    echo ""
}

main() {
    show_banner
    
    while true; do
        show_menu
        read -p "Select option (1-9): " choice
        echo ""
        
        case $choice in
            1)
                quick_scan
                ;;
            2)
                comprehensive_scan
                ;;
            3)
                advanced_vulnerability_scan
                ;;
            4)
                install_dependencies
                ;;
            5)
                check_tool_status
                ;;
            6)
                convert_report
                ;;
            7)
                demo_mode
                ;;
            8)
                show_help
                ;;
            9)
                echo -e "${GREEN}Thanks for using Pentest Suite!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option! Please select 1-9.${NC}"
                ;;
        esac
        
        echo ""
        read -p "Press Enter to continue..."
        echo ""
    done
}

# Run main function
main
